import {
  __commonJS
} from "./chunk-AC2VUBZ6.js";

// node_modules/@fdograph/rut-utilities/build/main.js
var require_main = __commonJS({
  "node_modules/@fdograph/rut-utilities/build/main.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.generateRut = exports.validateRutList = exports.validateRut = exports.calculateRutVerifier = exports.formatRut = exports.RutFormat = exports.deconstructRut = exports.getRutVerifier = exports.getRutDigits = exports.cleanRut = exports.isSuspiciousRut = exports.isRutLike = void 0;
    var rutLikePattern = () => /^(\d{0,2})\.?(\d{3})\.?(\d{3})-?(\d|k)$/gi;
    var suspiciousRutPattern = () => /^(\d)\1?\.?(\1{3})\.?(\1{3})-?(\d|k)?$/gi;
    var isRutLike = (rut) => rutLikePattern().test(rut);
    exports.isRutLike = isRutLike;
    var isSuspiciousRut = (rut) => suspiciousRutPattern().test(rut);
    exports.isSuspiciousRut = isSuspiciousRut;
    var cleanRut = (rut) => (0, exports.isRutLike)(rut) ? rut.replace(/[^0-9k]/gi, "") : "";
    exports.cleanRut = cleanRut;
    var getRutDigits = (rut) => (0, exports.cleanRut)(rut).slice(0, -1);
    exports.getRutDigits = getRutDigits;
    var getRutVerifier = (rut) => (0, exports.cleanRut)(rut).slice(-1);
    exports.getRutVerifier = getRutVerifier;
    var deconstructRut = (rut) => ({
      digits: (0, exports.getRutDigits)(rut),
      verifier: (0, exports.getRutVerifier)(rut)
    });
    exports.deconstructRut = deconstructRut;
    var RutFormat;
    (function(RutFormat2) {
      RutFormat2[RutFormat2["DOTS"] = 0] = "DOTS";
      RutFormat2[RutFormat2["DASH"] = 1] = "DASH";
      RutFormat2[RutFormat2["DOTS_DASH"] = 2] = "DOTS_DASH";
    })(RutFormat = exports.RutFormat || (exports.RutFormat = {}));
    var formatRut = (rut, format = RutFormat.DASH) => {
      if (rut === null || rut === void 0)
        return "";
      if (typeof rut !== "string")
        throw new TypeError("RUT needs to be a string or undefined");
      if (!(0, exports.isRutLike)(rut))
        return rut;
      switch (format) {
        case RutFormat.DOTS:
          return rut.replace(rutLikePattern(), (...m) => `${m[1] ? `${m[1]}.` : ""}${m[2]}.${m[3]}${m[4]}`);
        case RutFormat.DASH:
          return rut.replace(rutLikePattern(), "$1$2$3-$4");
        case RutFormat.DOTS_DASH:
          return rut.replace(rutLikePattern(), (...m) => `${m[1] ? `${m[1]}.` : ""}${m[2]}.${m[3]}-${m[4]}`);
        default:
          return rut.replace(rutLikePattern(), "$1$2$3$4");
      }
    };
    exports.formatRut = formatRut;
    var calculateRutVerifier = (digits) => {
      let sum = 0;
      let mul = 2;
      let i = digits.length;
      while (i--) {
        sum = sum + parseInt(digits.charAt(i)) * mul;
        if (mul % 7 === 0) {
          mul = 2;
        } else {
          mul++;
        }
      }
      const res = sum % 11;
      if (res === 0) {
        return "0";
      } else if (res === 1) {
        return "k";
      }
      return `${11 - res}`;
    };
    exports.calculateRutVerifier = calculateRutVerifier;
    var validateRut = (rut, noSuspicious = true) => {
      if (!(0, exports.isRutLike)(rut))
        return false;
      if (noSuspicious && (0, exports.isSuspiciousRut)(rut))
        return false;
      return (0, exports.getRutVerifier)(rut).toLowerCase() === (0, exports.calculateRutVerifier)((0, exports.getRutDigits)(rut));
    };
    exports.validateRut = validateRut;
    var validateRutList = (ruts, noSuspicious = true) => {
      const res = /* @__PURE__ */ new Map();
      for (const rut of ruts) {
        res.set(rut, (0, exports.validateRut)(rut, noSuspicious));
      }
      return res;
    };
    exports.validateRutList = validateRutList;
    var generateRut = () => {
      const digits = Math.floor(10000003 + Math.random() * 9e7).toString();
      const verifier = (0, exports.calculateRutVerifier)(digits);
      return (0, exports.formatRut)(digits + verifier);
    };
    exports.generateRut = generateRut;
  }
});
export default require_main();
//# sourceMappingURL=@fdograph_rut-utilities.js.map
